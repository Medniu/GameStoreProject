// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210303173105_Add data")]
    partial class Adddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("CategoryIndex");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("DateOfCreation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ProductName");

                    b.Property<decimal>("TotalRating")
                        .HasColumnType("decimal")
                        .HasColumnName("TotalRating");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Category", "DateCreated", "TotalRating");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            DateCreated = new DateTime(1996, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Left 4 Dead",
                            TotalRating = 9.0m
                        },
                        new
                        {
                            Id = 2,
                            Category = 0,
                            DateCreated = new DateTime(2018, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Battlefield",
                            TotalRating = 7.3m
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            DateCreated = new DateTime(2015, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Call of Duty",
                            TotalRating = 8.1m
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            DateCreated = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fifa 21",
                            TotalRating = 9.5m
                        },
                        new
                        {
                            Id = 5,
                            Category = 1,
                            DateCreated = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pes 21",
                            TotalRating = 9.2m
                        },
                        new
                        {
                            Id = 6,
                            Category = 1,
                            DateCreated = new DateTime(2015, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rocket League",
                            TotalRating = 8.2m
                        },
                        new
                        {
                            Id = 7,
                            Category = 1,
                            DateCreated = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NBA 2k21",
                            TotalRating = 7.2m
                        },
                        new
                        {
                            Id = 8,
                            Category = 1,
                            DateCreated = new DateTime(2017, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Drift 5",
                            TotalRating = 8.2m
                        },
                        new
                        {
                            Id = 9,
                            Category = 2,
                            DateCreated = new DateTime(2005, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Skyrim",
                            TotalRating = 9.5m
                        },
                        new
                        {
                            Id = 10,
                            Category = 2,
                            DateCreated = new DateTime(2017, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fallout 3",
                            TotalRating = 9.5m
                        },
                        new
                        {
                            Id = 11,
                            Category = 2,
                            DateCreated = new DateTime(2015, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Witcher 3",
                            TotalRating = 9.9m
                        },
                        new
                        {
                            Id = 12,
                            Category = 2,
                            DateCreated = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cyberpunk 2077",
                            TotalRating = 7.5m
                        },
                        new
                        {
                            Id = 13,
                            Category = 2,
                            DateCreated = new DateTime(2012, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mount and Blade",
                            TotalRating = 9.0m
                        },
                        new
                        {
                            Id = 14,
                            Category = 2,
                            DateCreated = new DateTime(2015, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dark Souls 3",
                            TotalRating = 9.5m
                        },
                        new
                        {
                            Id = 15,
                            Category = 2,
                            DateCreated = new DateTime(2007, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Overlord",
                            TotalRating = 9.1m
                        },
                        new
                        {
                            Id = 16,
                            Category = 3,
                            DateCreated = new DateTime(2005, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WarCraft 3",
                            TotalRating = 9.7m
                        },
                        new
                        {
                            Id = 17,
                            Category = 3,
                            DateCreated = new DateTime(2003, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StarCraft 2",
                            TotalRating = 9.5m
                        },
                        new
                        {
                            Id = 18,
                            Category = 3,
                            DateCreated = new DateTime(2002, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stronghold Crusader",
                            TotalRating = 9.7m
                        },
                        new
                        {
                            Id = 19,
                            Category = 3,
                            DateCreated = new DateTime(2007, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heroes of Might and Magic 5",
                            TotalRating = 9.9m
                        },
                        new
                        {
                            Id = 20,
                            Category = 4,
                            DateCreated = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Syberia",
                            TotalRating = 6.3m
                        },
                        new
                        {
                            Id = 21,
                            Category = 4,
                            DateCreated = new DateTime(2012, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sherlock Holmes",
                            TotalRating = 9.9m
                        });
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
